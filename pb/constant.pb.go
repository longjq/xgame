// Code generated by protoc-gen-go. DO NOT EDIT.
// source: constant.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnumType int32

const (
	EnumType_E_SYSTEM_READY EnumType = 100
)

var EnumType_name = map[int32]string{
	100: "E_SYSTEM_READY",
}

var EnumType_value = map[string]int32{
	"E_SYSTEM_READY": 100,
}

func (x EnumType) Enum() *EnumType {
	p := new(EnumType)
	*p = x
	return p
}

func (x EnumType) String() string {
	return proto.EnumName(EnumType_name, int32(x))
}

func (x *EnumType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EnumType_value, data, "EnumType")
	if err != nil {
		return err
	}
	*x = EnumType(value)
	return nil
}

func (EnumType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{0}
}

type IDScope int32

const (
	IDScope_ID_SYSTEM  IDScope = 0
	IDScope_ID_HALL    IDScope = 1000
	IDScope_ID_CHAT    IDScope = 1200
	IDScope_ID_REWARD  IDScope = 2000
	IDScope_ID_TRADE   IDScope = 3000
	IDScope_ID_BAG     IDScope = 3500
	IDScope_ID_FRIEND  IDScope = 4000
	IDScope_ID_RANK    IDScope = 4200
	IDScope_ID_GAME    IDScope = 5000
	IDScope_ID_LOTTERY IDScope = 5500
	IDScope_ID_TEXTAS  IDScope = 5600
)

var IDScope_name = map[int32]string{
	0:    "ID_SYSTEM",
	1000: "ID_HALL",
	1200: "ID_CHAT",
	2000: "ID_REWARD",
	3000: "ID_TRADE",
	3500: "ID_BAG",
	4000: "ID_FRIEND",
	4200: "ID_RANK",
	5000: "ID_GAME",
	5500: "ID_LOTTERY",
	5600: "ID_TEXTAS",
}

var IDScope_value = map[string]int32{
	"ID_SYSTEM":  0,
	"ID_HALL":    1000,
	"ID_CHAT":    1200,
	"ID_REWARD":  2000,
	"ID_TRADE":   3000,
	"ID_BAG":     3500,
	"ID_FRIEND":  4000,
	"ID_RANK":    4200,
	"ID_GAME":    5000,
	"ID_LOTTERY": 5500,
	"ID_TEXTAS":  5600,
}

func (x IDScope) Enum() *IDScope {
	p := new(IDScope)
	*p = x
	return p
}

func (x IDScope) String() string {
	return proto.EnumName(IDScope_name, int32(x))
}

func (x *IDScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IDScope_value, data, "IDScope")
	if err != nil {
		return err
	}
	*x = IDScope(value)
	return nil
}

func (IDScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{1}
}

//房间事件
type TableEventType int32

const (
	TableEventType_PLAYER_JOIN         TableEventType = 1
	TableEventType_PLAYER_LEAVE        TableEventType = 2
	TableEventType_PLAYER_RECONNECTED  TableEventType = 3
	TableEventType_PLAYER_DISCONNECTED TableEventType = 4
	TableEventType_PLAYER_KICKED       TableEventType = 5
	TableEventType_PLAYER_UPDATED      TableEventType = 6
)

var TableEventType_name = map[int32]string{
	1: "PLAYER_JOIN",
	2: "PLAYER_LEAVE",
	3: "PLAYER_RECONNECTED",
	4: "PLAYER_DISCONNECTED",
	5: "PLAYER_KICKED",
	6: "PLAYER_UPDATED",
}

var TableEventType_value = map[string]int32{
	"PLAYER_JOIN":         1,
	"PLAYER_LEAVE":        2,
	"PLAYER_RECONNECTED":  3,
	"PLAYER_DISCONNECTED": 4,
	"PLAYER_KICKED":       5,
	"PLAYER_UPDATED":      6,
}

func (x TableEventType) Enum() *TableEventType {
	p := new(TableEventType)
	*p = x
	return p
}

func (x TableEventType) String() string {
	return proto.EnumName(TableEventType_name, int32(x))
}

func (x *TableEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TableEventType_value, data, "TableEventType")
	if err != nil {
		return err
	}
	*x = TableEventType(value)
	return nil
}

func (TableEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{2}
}

//玩牌过程中动作类型
type BetAction int32

const (
	BetAction_FOLLOW    BetAction = 1
	BetAction_ADD       BetAction = 2
	BetAction_COMPARE   BetAction = 3
	BetAction_SHOW_HAND BetAction = 4
	BetAction_GIVE_UP   BetAction = 5
	BetAction_SEE_POKER BetAction = 6
)

var BetAction_name = map[int32]string{
	1: "FOLLOW",
	2: "ADD",
	3: "COMPARE",
	4: "SHOW_HAND",
	5: "GIVE_UP",
	6: "SEE_POKER",
}

var BetAction_value = map[string]int32{
	"FOLLOW":    1,
	"ADD":       2,
	"COMPARE":   3,
	"SHOW_HAND": 4,
	"GIVE_UP":   5,
	"SEE_POKER": 6,
}

func (x BetAction) Enum() *BetAction {
	p := new(BetAction)
	*p = x
	return p
}

func (x BetAction) String() string {
	return proto.EnumName(BetAction_name, int32(x))
}

func (x *BetAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BetAction_value, data, "BetAction")
	if err != nil {
		return err
	}
	*x = BetAction(value)
	return nil
}

func (BetAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{3}
}

//牌桌类型
type TableType int32

const (
	TableType_TABLE_L   TableType = 1
	TableType_TABLE_M   TableType = 2
	TableType_TABLE_H   TableType = 3
	TableType_TABLE_H2  TableType = 4
	TableType_TABLE_WAR TableType = 5
)

var TableType_name = map[int32]string{
	1: "TABLE_L",
	2: "TABLE_M",
	3: "TABLE_H",
	4: "TABLE_H2",
	5: "TABLE_WAR",
}

var TableType_value = map[string]int32{
	"TABLE_L":   1,
	"TABLE_M":   2,
	"TABLE_H":   3,
	"TABLE_H2":  4,
	"TABLE_WAR": 5,
}

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}

func (x *TableType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TableType_value, data, "TableType")
	if err != nil {
		return err
	}
	*x = TableType(value)
	return nil
}

func (TableType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{4}
}

//牌型
type PokerType int32

const (
	PokerType_P_BAOZI       PokerType = 10
	PokerType_P_TONGHUASHUN PokerType = 9
	PokerType_P_TONGHUA     PokerType = 8
	PokerType_P_SHUN        PokerType = 7
	PokerType_P_DUI         PokerType = 6
	PokerType_P_DAN         PokerType = 5
	PokerType_P_352         PokerType = 4
)

var PokerType_name = map[int32]string{
	10: "P_BAOZI",
	9:  "P_TONGHUASHUN",
	8:  "P_TONGHUA",
	7:  "P_SHUN",
	6:  "P_DUI",
	5:  "P_DAN",
	4:  "P_352",
}

var PokerType_value = map[string]int32{
	"P_BAOZI":       10,
	"P_TONGHUASHUN": 9,
	"P_TONGHUA":     8,
	"P_SHUN":        7,
	"P_DUI":         6,
	"P_DAN":         5,
	"P_352":         4,
}

func (x PokerType) Enum() *PokerType {
	p := new(PokerType)
	*p = x
	return p
}

func (x PokerType) String() string {
	return proto.EnumName(PokerType_name, int32(x))
}

func (x *PokerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PokerType_value, data, "PokerType")
	if err != nil {
		return err
	}
	*x = PokerType(value)
	return nil
}

func (PokerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{5}
}

// 排行榜类型
type RankType int32

const (
	RankType_RANK_WEALTH     RankType = 1
	RankType_RANK_CHARGE     RankType = 2
	RankType_RANK_CHARM      RankType = 3
	RankType_RANK_MAKE_MONEY RankType = 4
	RankType_RANK_WAR        RankType = 5
	RankType_RANK_TEXAS      RankType = 6
	RankType_RANK_LOTTERY    RankType = 7
)

var RankType_name = map[int32]string{
	1: "RANK_WEALTH",
	2: "RANK_CHARGE",
	3: "RANK_CHARM",
	4: "RANK_MAKE_MONEY",
	5: "RANK_WAR",
	6: "RANK_TEXAS",
	7: "RANK_LOTTERY",
}

var RankType_value = map[string]int32{
	"RANK_WEALTH":     1,
	"RANK_CHARGE":     2,
	"RANK_CHARM":      3,
	"RANK_MAKE_MONEY": 4,
	"RANK_WAR":        5,
	"RANK_TEXAS":      6,
	"RANK_LOTTERY":    7,
}

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return proto.EnumName(RankType_name, int32(x))
}

func (x *RankType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RankType_value, data, "RankType")
	if err != nil {
		return err
	}
	*x = RankType(value)
	return nil
}

func (RankType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{6}
}

// 排行榜参数
type RankTime int32

const (
	RankTime_RANK_ALL_TIME   RankTime = 0
	RankTime_RANK_YESTERDAY  RankTime = 1
	RankTime_RANK_TODAY      RankTime = 2
	RankTime_RANK_LAST_MONTH RankTime = 3
	RankTime_RANK_THIS_MONTH RankTime = 4
	RankTime_RANK_LAST_WEEK  RankTime = 5
	RankTime_RANK_THIS_WEEK  RankTime = 6
)

var RankTime_name = map[int32]string{
	0: "RANK_ALL_TIME",
	1: "RANK_YESTERDAY",
	2: "RANK_TODAY",
	3: "RANK_LAST_MONTH",
	4: "RANK_THIS_MONTH",
	5: "RANK_LAST_WEEK",
	6: "RANK_THIS_WEEK",
}

var RankTime_value = map[string]int32{
	"RANK_ALL_TIME":   0,
	"RANK_YESTERDAY":  1,
	"RANK_TODAY":      2,
	"RANK_LAST_MONTH": 3,
	"RANK_THIS_MONTH": 4,
	"RANK_LAST_WEEK":  5,
	"RANK_THIS_WEEK":  6,
}

func (x RankTime) Enum() *RankTime {
	p := new(RankTime)
	*p = x
	return p
}

func (x RankTime) String() string {
	return proto.EnumName(RankTime_name, int32(x))
}

func (x *RankTime) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RankTime_value, data, "RankTime")
	if err != nil {
		return err
	}
	*x = RankTime(value)
	return nil
}

func (RankTime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{7}
}

type ShopItemType int32

const (
	ShopItemType_SHOP_GOLD ShopItemType = 1
	ShopItemType_SHOP_ITEM ShopItemType = 2
)

var ShopItemType_name = map[int32]string{
	1: "SHOP_GOLD",
	2: "SHOP_ITEM",
}

var ShopItemType_value = map[string]int32{
	"SHOP_GOLD": 1,
	"SHOP_ITEM": 2,
}

func (x ShopItemType) Enum() *ShopItemType {
	p := new(ShopItemType)
	*p = x
	return p
}

func (x ShopItemType) String() string {
	return proto.EnumName(ShopItemType_name, int32(x))
}

func (x *ShopItemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ShopItemType_value, data, "ShopItemType")
	if err != nil {
		return err
	}
	*x = ShopItemType(value)
	return nil
}

func (ShopItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{8}
}

type NotificationType int32

const (
	NotificationType_N_BROADCAST     NotificationType = 1
	NotificationType_N_MAIL          NotificationType = 2
	NotificationType_N_REWARD        NotificationType = 3
	NotificationType_N_GIFT_RECEIVED NotificationType = 4
	NotificationType_N_KICK_OFF      NotificationType = 5
	NotificationType_N_CHARGE        NotificationType = 6
	NotificationType_N_FRIEND_APPLY  NotificationType = 7
	NotificationType_N_EXP_UPGRADE   NotificationType = 8
	NotificationType_N_H5            NotificationType = 9
	NotificationType_N_TEXAS         NotificationType = 10
)

var NotificationType_name = map[int32]string{
	1:  "N_BROADCAST",
	2:  "N_MAIL",
	3:  "N_REWARD",
	4:  "N_GIFT_RECEIVED",
	5:  "N_KICK_OFF",
	6:  "N_CHARGE",
	7:  "N_FRIEND_APPLY",
	8:  "N_EXP_UPGRADE",
	9:  "N_H5",
	10: "N_TEXAS",
}

var NotificationType_value = map[string]int32{
	"N_BROADCAST":     1,
	"N_MAIL":          2,
	"N_REWARD":        3,
	"N_GIFT_RECEIVED": 4,
	"N_KICK_OFF":      5,
	"N_CHARGE":        6,
	"N_FRIEND_APPLY":  7,
	"N_EXP_UPGRADE":   8,
	"N_H5":            9,
	"N_TEXAS":         10,
}

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return proto.EnumName(NotificationType_name, int32(x))
}

func (x *NotificationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NotificationType_value, data, "NotificationType")
	if err != nil {
		return err
	}
	*x = NotificationType(value)
	return nil
}

func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{9}
}

type RewardType int32

const (
	RewardType_DONE    RewardType = 0
	RewardType_SUCCESS RewardType = 1
	RewardType_NO_TASK RewardType = -1
)

var RewardType_name = map[int32]string{
	0:  "DONE",
	1:  "SUCCESS",
	-1: "NO_TASK",
}

var RewardType_value = map[string]int32{
	"DONE":    0,
	"SUCCESS": 1,
	"NO_TASK": -1,
}

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}

func (x *RewardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewardType_value, data, "RewardType")
	if err != nil {
		return err
	}
	*x = RewardType(value)
	return nil
}

func (RewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{10}
}

type ChatType int32

const (
	ChatType_CHAT_WORD  ChatType = 1
	ChatType_CHAT_ZJH   ChatType = 2
	ChatType_CHAT_WAR   ChatType = 3
	ChatType_CHAT_TEXAS ChatType = 4
)

var ChatType_name = map[int32]string{
	1: "CHAT_WORD",
	2: "CHAT_ZJH",
	3: "CHAT_WAR",
	4: "CHAT_TEXAS",
}

var ChatType_value = map[string]int32{
	"CHAT_WORD":  1,
	"CHAT_ZJH":   2,
	"CHAT_WAR":   3,
	"CHAT_TEXAS": 4,
}

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (x *ChatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChatType_value, data, "ChatType")
	if err != nil {
		return err
	}
	*x = ChatType(value)
	return nil
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_843faeeaf315cb4d, []int{11}
}

func init() {
	proto.RegisterEnum("pb.EnumType", EnumType_name, EnumType_value)
	proto.RegisterEnum("pb.IDScope", IDScope_name, IDScope_value)
	proto.RegisterEnum("pb.TableEventType", TableEventType_name, TableEventType_value)
	proto.RegisterEnum("pb.BetAction", BetAction_name, BetAction_value)
	proto.RegisterEnum("pb.TableType", TableType_name, TableType_value)
	proto.RegisterEnum("pb.PokerType", PokerType_name, PokerType_value)
	proto.RegisterEnum("pb.RankType", RankType_name, RankType_value)
	proto.RegisterEnum("pb.RankTime", RankTime_name, RankTime_value)
	proto.RegisterEnum("pb.ShopItemType", ShopItemType_name, ShopItemType_value)
	proto.RegisterEnum("pb.NotificationType", NotificationType_name, NotificationType_value)
	proto.RegisterEnum("pb.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("pb.ChatType", ChatType_name, ChatType_value)
}

func init() { proto.RegisterFile("constant.proto", fileDescriptor_843faeeaf315cb4d) }

var fileDescriptor_843faeeaf315cb4d = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x54, 0xcd, 0x8e, 0x1b, 0x45,
	0x10, 0xce, 0xf8, 0x6f, 0xc6, 0x65, 0xaf, 0xb7, 0xe8, 0x20, 0x72, 0x40, 0x02, 0x6e, 0x48, 0x03,
	0xe2, 0x10, 0x94, 0x03, 0xc7, 0xf6, 0x74, 0xd9, 0xd3, 0xf1, 0xb8, 0x7b, 0xd4, 0xd3, 0x5e, 0xaf,
	0x73, 0x69, 0x39, 0x1b, 0x43, 0x56, 0x21, 0xb6, 0xb5, 0x0c, 0x20, 0x8e, 0xdc, 0x90, 0x38, 0xf2,
	0x02, 0x3c, 0x00, 0x20, 0x8e, 0x3c, 0x06, 0x8f, 0xc0, 0x31, 0x0f, 0x81, 0x04, 0xea, 0x9e, 0xb1,
	0x37, 0x3e, 0xf5, 0xf7, 0xd5, 0x8f, 0xeb, 0xab, 0x9f, 0x81, 0xc9, 0xcd, 0x61, 0xff, 0x4d, 0xbd,
	0xdd, 0xd7, 0x9f, 0x1d, 0xef, 0x0e, 0xf5, 0x81, 0x75, 0x8e, 0xcf, 0xd3, 0x0f, 0x20, 0xa1, 0xfd,
	0xb7, 0xaf, 0xed, 0x0f, 0xc7, 0x1d, 0x63, 0x30, 0x21, 0x57, 0x6d, 0x2a, 0x4b, 0x4b, 0x67, 0x88,
	0x8b, 0x0d, 0xbe, 0x48, 0x7f, 0x8f, 0x20, 0x96, 0xa2, 0xba, 0x39, 0x1c, 0x77, 0xec, 0x02, 0x86,
	0x52, 0xb4, 0x0e, 0xf8, 0x80, 0x8d, 0xbd, 0xc5, 0xe5, 0xbc, 0x28, 0xf0, 0x4d, 0xdc, 0xa2, 0x2c,
	0xe7, 0x16, 0xff, 0x1c, 0xb2, 0x49, 0x70, 0x35, 0xb4, 0xe6, 0x46, 0xe0, 0xdf, 0x97, 0xec, 0x02,
	0x12, 0x29, 0x9c, 0x35, 0x5c, 0x10, 0xfe, 0xf5, 0x88, 0x8d, 0x60, 0x20, 0x85, 0x9b, 0xf2, 0x39,
	0xfe, 0xf6, 0x7e, 0xeb, 0x3b, 0x33, 0x92, 0x94, 0xc0, 0x5f, 0x3f, 0x6c, 0x33, 0x19, 0xae, 0x16,
	0xf8, 0xe6, 0xa3, 0x16, 0xcd, 0xf9, 0x92, 0xf0, 0xa7, 0x8f, 0xd9, 0x25, 0x80, 0x14, 0xae, 0xd0,
	0xd6, 0x92, 0xd9, 0xe0, 0xbf, 0x69, 0x1b, 0x6c, 0xe9, 0xda, 0xf2, 0x0a, 0xff, 0xf9, 0x24, 0xfd,
	0x39, 0x82, 0x89, 0xdd, 0x3e, 0xff, 0x7a, 0x47, 0xdf, 0xed, 0xf6, 0x75, 0x90, 0x75, 0x09, 0xa3,
	0xb2, 0xe0, 0x1b, 0x32, 0xee, 0xa9, 0x96, 0x0a, 0x23, 0x86, 0x30, 0x6e, 0x89, 0x82, 0xf8, 0x15,
	0x61, 0x87, 0xbd, 0x07, 0xac, 0x65, 0x0c, 0x65, 0x5a, 0x29, 0xca, 0x2c, 0x09, 0xec, 0xb2, 0x47,
	0xf0, 0xb0, 0xe5, 0x85, 0xac, 0xee, 0x0d, 0x3d, 0xf6, 0x0e, 0x5c, 0xb4, 0x86, 0x85, 0xcc, 0x16,
	0x24, 0xb0, 0xef, 0xbb, 0xd7, 0x52, 0xab, 0x52, 0x70, 0xef, 0x36, 0x48, 0xaf, 0x61, 0x38, 0xdd,
	0xd5, 0xfc, 0xa6, 0xbe, 0x3d, 0xec, 0x19, 0xc0, 0x60, 0xa6, 0x8b, 0x42, 0xaf, 0x31, 0x62, 0x31,
	0x74, 0xb9, 0x10, 0xd8, 0x61, 0x23, 0x88, 0x33, 0xbd, 0x2c, 0xb9, 0x21, 0xec, 0xfa, 0x06, 0x57,
	0xb9, 0x5e, 0xbb, 0x9c, 0x2b, 0xff, 0x27, 0x23, 0x88, 0xe7, 0xf2, 0x8a, 0xdc, 0xaa, 0xc4, 0x7e,
	0xb0, 0x11, 0xb9, 0x52, 0x2f, 0xc8, 0xe0, 0x20, 0xd5, 0x30, 0x0c, 0x32, 0x83, 0xc2, 0x11, 0xc4,
	0x96, 0x4f, 0x0b, 0x72, 0x05, 0x46, 0xf7, 0x60, 0xd9, 0xa4, 0x6f, 0x40, 0x8e, 0x5d, 0x36, 0x86,
	0xa4, 0x05, 0x8f, 0xb1, 0xe7, 0x13, 0x36, 0x68, 0xcd, 0x0d, 0xf6, 0xd3, 0xaf, 0x60, 0x58, 0x1e,
	0x5e, 0xed, 0xee, 0x4e, 0x09, 0x4b, 0x37, 0xe5, 0xfa, 0x99, 0x44, 0x08, 0x5a, 0x9d, 0xd5, 0x6a,
	0x9e, 0xaf, 0x78, 0x95, 0xaf, 0x14, 0x0e, 0x7d, 0xec, 0x99, 0xc2, 0xc4, 0x2b, 0x2b, 0x5d, 0x30,
	0xc5, 0x6c, 0x08, 0xfd, 0xd2, 0x89, 0x95, 0xc4, 0x41, 0xfb, 0xe4, 0x0a, 0xfb, 0xcd, 0xf3, 0xf3,
	0x27, 0x8f, 0xb1, 0x97, 0xfe, 0x18, 0x41, 0x62, 0xb6, 0xfb, 0x57, 0xa7, 0xd9, 0xf8, 0x41, 0xbb,
	0x35, 0xf1, 0xc2, 0xe6, 0x18, 0x9d, 0x89, 0x2c, 0xe7, 0x66, 0xee, 0x47, 0x33, 0x01, 0x38, 0x13,
	0x4b, 0xec, 0xb2, 0x87, 0x70, 0x19, 0xf0, 0x92, 0x2f, 0xc8, 0x2d, 0xb5, 0xa2, 0x0d, 0xf6, 0xbc,
	0xb2, 0x26, 0x8d, 0x97, 0x72, 0x0e, 0xb1, 0x74, 0xcd, 0x2b, 0x1c, 0xf8, 0x79, 0x07, 0x7c, 0x5a,
	0x9b, 0x38, 0xfd, 0xe5, 0x54, 0xc3, 0xed, 0xeb, 0x9d, 0xd7, 0x17, 0xcc, 0xbc, 0x28, 0x9c, 0x95,
	0x4b, 0xc2, 0x07, 0x7e, 0x96, 0x81, 0xda, 0x50, 0x65, 0xc9, 0x08, 0xbe, 0xc1, 0xe8, 0x3e, 0xab,
	0xf6, 0xb8, 0x73, 0x2e, 0xa4, 0xe0, 0x95, 0xf5, 0x85, 0xd8, 0xfc, 0xad, 0xea, 0x6c, 0x2e, 0xab,
	0x96, 0xec, 0x9d, 0xb3, 0x05, 0xcf, 0x35, 0xd1, 0xa2, 0xd9, 0x96, 0x7b, 0xc7, 0xc0, 0x0d, 0xd2,
	0x4f, 0x61, 0x5c, 0xbd, 0x3c, 0x1c, 0x65, 0xbd, 0x6b, 0xee, 0xb1, 0x59, 0x87, 0xd2, 0xcd, 0x75,
	0x21, 0x30, 0x3a, 0x43, 0xe9, 0xcf, 0xaf, 0x93, 0xfe, 0x11, 0x01, 0xaa, 0x43, 0x7d, 0xfb, 0xe5,
	0xed, 0xcd, 0xd6, 0xef, 0xd7, 0xa9, 0x9f, 0xca, 0x4d, 0x8d, 0xe6, 0x22, 0xe3, 0x95, 0xc5, 0xc8,
	0x8f, 0x46, 0xb9, 0x25, 0x97, 0x05, 0x76, 0x7c, 0x97, 0xd4, 0xe9, 0x26, 0x43, 0xa9, 0xca, 0xcd,
	0xe5, 0xcc, 0xfa, 0x9d, 0x27, 0x79, 0x15, 0xf6, 0x7a, 0x02, 0xa0, 0xc2, 0x4a, 0x3b, 0x3d, 0x9b,
	0x61, 0xbf, 0x09, 0x69, 0x67, 0x31, 0xf0, 0x45, 0xab, 0xf6, 0x50, 0x1d, 0x2f, 0xcb, 0x62, 0x83,
	0xb1, 0xef, 0x9e, 0x72, 0x74, 0x5d, 0xba, 0x55, 0x39, 0x0f, 0xe7, 0x9d, 0xb0, 0x04, 0x7a, 0xca,
	0xe5, 0x4f, 0x70, 0xe8, 0xf7, 0x48, 0xb5, 0x63, 0x80, 0xf4, 0x0b, 0x00, 0xb3, 0xfb, 0x7e, 0x7b,
	0xf7, 0x22, 0x54, 0x9a, 0x40, 0x4f, 0x68, 0xe5, 0x9b, 0x3d, 0x82, 0xb8, 0x5a, 0x65, 0x19, 0x55,
	0x15, 0x46, 0xec, 0x5d, 0x88, 0x95, 0x76, 0x96, 0x57, 0x0b, 0xfc, 0xef, 0xf4, 0x8b, 0x52, 0x82,
	0x24, 0x7b, 0xb9, 0xad, 0x4f, 0x5d, 0xf1, 0x5f, 0x19, 0xb7, 0xd6, 0xc6, 0x77, 0x65, 0x0c, 0x49,
	0x80, 0xcf, 0x9e, 0xe6, 0x8d, 0xc4, 0xc6, 0xc8, 0x0d, 0x76, 0xbd, 0x9a, 0x80, 0x9a, 0x0a, 0x7a,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x79, 0x0e, 0xfc, 0x01, 0x05, 0x00, 0x00,
}
